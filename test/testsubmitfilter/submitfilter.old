#!/usr/bin/perl

use Getopt::Long;
Getopt::Long::Configure("pass_through");

# ignore unknown flags (i.e. ones that are useful for qsub but not here)
ignore() if (! GetOptions("m=s"=>\$mail_cli,
       "l=s"=>\@resource_list_cli,
       "q=s"=>\$queue_cli
      ));

sub ignore {
}

my ($first,$rest)="";
my %mem_limit=();

my $i=0;
my $mail=0;
my $nodes=1;
my $cores=1;
my $ppn=1;
my $server=0;
my $nodes_cmd_line=0;

sub check_resources {
    my @array=@{shift()};
    foreach my $value (@array) {
        if ($value=~m/^nodes=(\d+):ppn=(\d+).*$/) {
                $nodes_cmd_line=1;
                $nodes=$1 if $nodes=1;
                $ppn=$2 if $ppn=1;
                $cores=$ppn if ($cores=1);
            } elsif ($value=~m/^(vmem)=(.*)$/) {
                my $resource=$1;
                my $limit=$2;
                    $mem_limit{$resource}=$limit if (!$mem_limit{$resource});
            }
    }
}

my @values_cli=split(',', join(',',@resource_list_cli));
check_resources(\@values_cli);

$mail = 1 if ($mail_cli=~m/^.+$/); # ensure at least one char is specified (i.e. that option -m was used)

# check if -q is specified on command line with server (@SERVER)
# command line has precedence over in script PBS directives and PBS_DEFAULT
$server = $1 if ($queue_cli=~m/^.*@master[0-9]*\.([^.]*)\.gent\.vsc$/);

while (<STDIN>) {
    $line=$_;

    if ($line=~m/^#PBS\s+-l\s+(.*)$/) {
        my $resource_list=$1;
        chomp $resource_list;
        my @values=split(',', $resource_list);
        my $nodes_cmd_line_bk=$nodes_cmd_line;
        check_resources(\@values);
        # only take into account -l specifications on command line (not in script)
        $nodes_cmd_line=$nodes_cmd_line_bk;
    }

    $mail = 1 if ($line=~m/^#PBS\s+-m\s+.*$/);

    if(!$server){
        # if server is not defined yet, check if -q is specified in script with server (@SERVER)
        # script PBS directive has precedence over PBS_DEFAULT
        $server = $1 if ($line=~m/^#PBS\s+-q\s+.*@master[0-9]*\.([^.]*)\.gent\.vsc$/);
    }

    if ($i) {
        $rest.=$line;
    } else {
        $first.=$line;
    }
        $i++;
}

# if server is not defined yet, try and determine it from PBS_DEFAULT environment variable
if(!$server){
    my $env_pbs_default=$ENV{'PBS_DEFAULT'};
    print env_pbs_default;
    $server = $1 if ($env_pbs_default=~m/^master[0-9]*\.([^.]*)\.gent\.vsc$/);
}

# default PBS server assumption
# used in case PBS_DEFAULT is undefined and no -q with server spec was found
if(!$server){
    $server="default";
}

# check whether VSC_NODE_PARTITION environment variable is set
# used for gulpin/dugtrio
my $vsc_node_partition=$ENV{'VSC_NODE_PARTITION'};
if($vsc_node_partition){
    $first.="\n#PBS -W x=PARTITION:$vsc_node_partition\n";
}


my $core_memory_limit = 1536; # default value (MB)
if ($server=~m/^(gengar|default)$/) {
    $core_memory_limit = 4096; # in MB, ( 16G (RAM) + 16G (half of swap) ) / 8
}
elsif ($server=~m/^(gastly|haunter)$/) {
    $core_memory_limit = 2304; # in MB, ( 12G (RAM) + 6G (half of swap) ) / 8
}
elsif ($server=~m/^(gulpin)$/) {
    $core_memory_limit = 2250; # in MB, ( 64G (RAM) + 8G (half of swap) ) / 32
    if($vsc_node_partition=~m/dugtrio/) {
        ## don't set it at all
        $mem_limit{"vmem"}=1 if (!$mem_limit{"vmem"});
    }
}
elsif($server=~m/^(dugtrio)$/) {
        ## don't set it at all
        $mem_limit{"vmem"}=1 if (!$mem_limit{"vmem"});
}



if (!$mem_limit{"vmem"}) {
    my $vmem = $cores * $core_memory_limit;
    $first.="\n# No vmem limit specified - added by submitfilter (server found: $server)\n#PBS -l vmem=".$vmem."mb\n";
}
if (!$mail) {
    $first.="\n# No mail specified - added by submitfilter\n#PBS -m n\n";
}


my $script=$first.$rest;
print $script;
