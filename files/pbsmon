#!/usr/bin/python
#
# Author: Bas van der Vlies <basv@sara.nl>
# Date  : 17 Aug 2001
# Desc. : This script displays the status of the PBS batch.
#         It display the status of a node. The ideas are
#         based on the awk-script of Willem Vermin
#
# CVS info:
# $Id: pbsmon.py 134 2006-10-10 09:29:08Z bas $
#
# SDW: add cluster node types
#
import re
from math import ceil
import pbs
from PBSQuery import PBSQuery

regbyte = re.compile(r"^\s*(?P<value>\d+)(?P<byte>(?:k|m|g)b)\s*$", re.I)
kb = 1024
mb = 1024 * 1024
gb = 1024 * 1024 * 1024
def str2byte(txt):
    ## converts string like 100kb to float value in byte
    exec("p=float(%s)") % regbyte.sub(r'\g<value>*\g<byte>', txt).lower()
    return p


re_host = re.compile(r"(?P<name>\d+)")

pbs_ND_free_and_job = 'partial'
pbs_ND_down_on_error = 'downerror'

translate_state = {
    pbs.ND_free             : '_',
    pbs.ND_down             : 'X',
    pbs.ND_offline          : '.',
    pbs.ND_reserve          : 'R',
    pbs.ND_job_exclusive    : 'J',
    pbs.ND_job_sharing      : 'S',
    pbs.ND_busy             : '*',
    pbs.ND_state_unknown    : '?',
    pbs.ND_timeshared       : 'T',
    pbs.ND_cluster          : 'C',
    pbs_ND_free_and_job     : 'j',
    pbs_ND_down_on_error    : 'x',
}



def display_cluster_status(nl, sl):
    # Thanks to Daniel Olson, we have now code that can handle
    # 2 and 3 digit hostname numbers
    #
    if len(nl) == 1:
        width = len(nl[0])
    else:
        width = len(nl[-1])

    # Determine what format we have to use
    #
    if width == 3:
        step = end = 19
        fmt = '%3s'
    else:
        step = end = 25
        fmt = '%2s'

    start = 0

    items = len(nl)

    # Sanity check 
    if end > items:
        end = items

    while start < items:

        print ' ',
        for j in range(start, end):
            print fmt % (nl[j]) ,

        print '\n ',
        for j in range(start, end):
            print fmt % (sl[j]) ,

        print '\n'

        start = end
        end = end + step

        if end > items:
            end = items

    # Now some statistics
    #
    n = 0
    other = 0
    keys_others = [pbs.ND_busy,
                   pbs.ND_reserve,
                   pbs.ND_timeshared,
                   pbs.ND_job_sharing,
                   pbs.ND_state_unknown,
                   pbs.ND_cluster
                   ]
    ## good = left = even , bad = right = odd
    ## - others should be odd
    keys_show = [pbs.ND_job_exclusive,
                 pbs.ND_offline,
                 pbs_ND_free_and_job,
                 pbs.ND_down,
                 pbs.ND_free,
                 pbs_ND_down_on_error,
                 ]
    for key in keys_show + keys_others:
        value = translate_state[key]
        if key in keys_others:
            other += sl.count(value)
        else:
            if key == "job-exclusive":
                print "%3s %-21s : %d\t |" % (value, "full", sl.count(value)),
            else:
                print "%3s %-21s : %d\t |" % (value, key, sl.count(value)),
            if n % 2:
                print ''
            n += 1
    if n % 2 == 0:
        print "%3s %-21s   %s\t |" % (' ', ' ', ' '),
    print "%3s %-21s : %d\t |" % ('o', "other", other),


def display_node_types(types):
    """
    ['48', 340, 340, 2060]
    """
    template = "%sppn=%s, physmem=%sGB, swap=%sGB, vmem=%sGB, local disk=%sGB\n"
    txt = "\n\nNode type"
    offset = ' '
    if len(types) > 1:
        txt += "s:\n"
        offset = "  "
    else:
        txt += ":"
    for typ in types:
        cores, phys, swap, disk = typ
        txt += template % (offset, cores, phys, swap, phys + swap, disk)

    print txt

def main():
    types = []
    state_list = []
    node_list = []
    node_nr = 0

    p = PBSQuery()
    pp = p.getnodes(['state'])
    nodes = pp.keys()
    nodes.sort()
    for node in nodes:
        # A node can have serveral states, huh. We are only
        # interested in first entry.
        #
        state = pp[node]['state'][0]

        # look if on a free node a job is scheduled, then mark it
        # as other state
        #
        addstate = translate_state[state]
        if state == pbs.ND_free:
            if pp[node].has_key('jobs'):
                addstate = translate_state[pbs_ND_free_and_job]
        elif state == pbs.ND_down:
            if pp[node].has_key('error'):
                addstate = translate_state[pbs_ND_down_on_error]

        state_list.append(addstate)

        ## down_on_error is also down
        if not state in (pbs.ND_down, pbs.ND_offline):
            cores = pp[node]['np'][0]
            rp = pp[node]['status'].get('physmem', None)
            rt = pp[node]['status'].get('totmem', None)
            rs = pp[node]['status'].get('size', None)
            if rp and rt and rs:
                ## 'physmem': ['66103784kb']
                p = str2byte(rp[0])
                ## 'totmem': ['82891700kb']
                t = str2byte(rt[0])
                ## 'size': ['539214180kb:539416640kb']
                ## - use 2nd field
                s = str2byte(rs[0].split(':')[1])

                ## round mem to 1 gb, size to 5gb
                pmem = ceil(10 * p / gb) / 10
                tmem = ceil(10 * t / gb) / 10
                swap = tmem - pmem
                dsize = ceil(10 * s / (5 * gb)) / 2
                typ = [cores, pmem, swap, dsize]
                if not typ in types:
                    types.append(typ)

        result = re_host.search(node)
        if result:
            node_list.append(result.group('name'))
        else:
            node_nr = node_nr + 1
            node_list.append(str(node_nr))

    display_cluster_status(node_list, state_list)
    display_node_types(types)

main()
